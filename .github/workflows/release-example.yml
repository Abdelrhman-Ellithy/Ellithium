name: Release Example Workflow

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 2.1.0)'
        required: true
        default: '2.1.0'
      release_type:
        description: 'Release type'
        required: true
        default: 'minor'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  analyze-changes:
    runs-on: ubuntu-latest
    outputs:
      new_methods: ${{ steps.detect-changes.outputs.new_methods_count }}
      new_classes: ${{ steps.detect-changes.outputs.new_classes_count }}
      change_report: ${{ steps.detect-changes.outputs.change_report }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Make script executable
        run: chmod +x scripts/detect-java-changes.sh

      - name: Detect changes since last release
        id: detect-changes
        run: |
          # Find the last release tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")
          CURRENT_SHA=$(git rev-parse HEAD)
          
          echo "Analyzing changes from $LAST_TAG to $CURRENT_SHA"
          
          # Run the Java change detection script
          ./scripts/detect-java-changes.sh "$LAST_TAG" "$CURRENT_SHA" "/tmp/release_analysis"

  create-release:
    needs: analyze-changes
    runs-on: ubuntu-latest
    if: needs.analyze-changes.outputs.new_methods != '0' || needs.analyze-changes.outputs.new_classes != '0'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: Release v${{ github.event.inputs.version }}
          body: |
            ## 🎯 Release v${{ github.event.inputs.version }}
            
            ### 📊 Change Summary
            - **New Methods:** ${{ needs.analyze-changes.outputs.new_methods }}
            - **New Classes:** ${{ needs.analyze-changes.outputs.new_classes }}
            
            ### 🔍 Detailed Changes
            ${{ needs.analyze-changes.outputs.change_report }}
            
            ---
            *This release was automatically generated by the Ellithium Release System*
          draft: false
          prerelease: false

  notify-team:
    needs: [analyze-changes, create-release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify team of release
        run: |
          echo "🚀 Release v${{ github.event.inputs.version }} has been created!"
          echo "📊 New Methods: ${{ needs.analyze-changes.outputs.new_methods }}"
          echo "🏗️ New Classes: ${{ needs.analyze-changes.outputs.new_classes }}"
          
          # You can add Slack, email, or other notification methods here
          # Example: curl -X POST -H 'Content-type: application/json' --data '{"text":"New release created!"}' ${{ secrets.SLACK_WEBHOOK }}
