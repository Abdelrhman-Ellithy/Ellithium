name: Release Drafter

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    types: [opened, reopened, synchronize]
  workflow_dispatch:

jobs:
  update_release_draft:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      
      - name: Make script executable
        run: chmod +x scripts/detect-java-changes.sh
      
      - name: Enhanced Java Change Detection
        id: detect-changes
        run: |
          # Get the last tag for comparison
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")
          echo "Last tag: $LAST_TAG"
          
          # Get the current commit SHA
          CURRENT_COMMIT=$(git rev-parse HEAD)
          echo "Current commit: $CURRENT_COMMIT"
          
          # Create temporary output directory
          OUTPUT_DIR="/tmp/release_analysis"
          mkdir -p "$OUTPUT_DIR"
          
          # Run enhanced change detection between the last tag and current commit
          echo "Comparing $LAST_TAG to $CURRENT_COMMIT"
          OUTPUT=$(./scripts/detect-java-changes.sh "$LAST_TAG" "$CURRENT_COMMIT" "$OUTPUT_DIR")
          echo "$OUTPUT"
          
          # Extract key metrics for release notes with better error handling
          NEW_METHODS=$(echo "$OUTPUT" | grep "📊 New Methods:" | sed 's/.*📊 New Methods: \([0-9]*\).*/\1/' 2>/dev/null || echo "0")
          NEW_CLASSES=$(echo "$OUTPUT" | grep "🏗️ New Classes:" | sed 's/.*🏗️ New Classes: \([0-9]*\).*/\1/' 2>/dev/null || echo "0")
          MODIFIED_METHODS=$(echo "$OUTPUT" | grep "🔄 Modified Methods:" | sed 's/.*🔄 Modified Methods: \([0-9]*\).*/\1/' 2>/dev/null || echo "0")
          MODIFIED_CLASSES=$(echo "$OUTPUT" | grep "🔄 Modified Classes:" | sed 's/.*🔄 Modified Classes: \([0-9]*\).*/\1/' 2>/dev/null || echo "0")
          FILES_MODIFIED=$(echo "$OUTPUT" | grep "📁 Files Modified:" | sed 's/.*📁 Files Modified: \([0-9]*\).*/\1/' 2>/dev/null || echo "0")
          
          # Debug output
          echo "Extracted metrics:"
          echo "  New Methods: $NEW_METHODS"
          echo "  New Classes: $NEW_CLASSES"
          echo "  Modified Methods: $MODIFIED_METHODS"
          echo "  Modified Classes: $MODIFIED_CLASSES"
          echo "  Files Modified: $FILES_MODIFIED"
          
          # Set outputs for release-drafter
          echo "new_methods_count=$NEW_METHODS" >> $GITHUB_OUTPUT
          echo "new_classes_count=$NEW_CLASSES" >> $GITHUB_OUTPUT
          echo "modified_methods_count=$MODIFIED_METHODS" >> $GITHUB_OUTPUT
          echo "modified_classes_count=$MODIFIED_CLASSES" >> $GITHUB_OUTPUT
          echo "files_modified_count=$FILES_MODIFIED" >> $GITHUB_OUTPUT
          
                     # Store full report for release notes
           echo "change_report<<EOF" >> $GITHUB_OUTPUT
           echo "$OUTPUT" >> $GITHUB_OUTPUT
           echo "EOF" >> $GITHUB_OUTPUT
           
           # Also read the detailed report file directly
           if [[ -f "$OUTPUT_DIR/analysis/change_report.md" ]]; then
             echo "change_report_detailed<<EOF" >> $GITHUB_OUTPUT
             cat "$OUTPUT_DIR/analysis/change_report.md" >> $GITHUB_OUTPUT
             echo "EOF" >> $GITHUB_OUTPUT
           else
             echo "change_report_detailed<<EOF" >> $GITHUB_OUTPUT
             echo "Detailed report file not found" >> $GITHUB_OUTPUT
             echo "EOF" >> $GITHUB_OUTPUT
           fi
          
          # Debug: Show what we're storing
          echo "DEBUG: Stored change report length: $(echo "$OUTPUT" | wc -c) characters"
          echo "DEBUG: First 200 chars of OUTPUT:"
          echo "$OUTPUT" | head -c 200
          echo "..."
          
                     # Debug: Show what files were generated
           echo "DEBUG: Generated files in $OUTPUT_DIR:"
           find "$OUTPUT_DIR" -type f -name "*.txt" -o -name "*.md" | head -10
           echo "DEBUG: Analysis directory contents:"
           ls -la "$OUTPUT_DIR/analysis/" 2>/dev/null || echo "No analysis directory found"
           
           # Debug: Show content of key files
           echo "DEBUG: Content of change_report.md (first 1000 chars):"
           if [[ -f "$OUTPUT_DIR/analysis/change_report.md" ]]; then
             head -c 1000 "$OUTPUT_DIR/analysis/change_report.md"
             echo "..."
           else
             echo "change_report.md not found"
           fi
      
      # Only run release-drafter for PRs and tag pushes (not main branch pushes)
      - name: Release Drafter
        id: release_drafter
        if: github.event_name == 'pull_request' || startsWith(github.ref, 'refs/tags/')
        uses: release-drafter/release-drafter@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-name: release-drafter.yml
          name: ${{ github.ref_name }}
          tag: ${{ github.ref_name }}
          publish: false
          prerelease: false
      
      - name: Create Enhanced Release Notes
        if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main')
        run: |
          # Determine if this is a tag push or main branch push
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            echo "Creating enhanced release notes for tag: $TAG_NAME"
          else
            # For main branch, get the latest tag
            TAG_NAME=$(git describe --tags --abbrev=0 2>/dev/null || echo "latest")
            echo "Creating enhanced release notes for latest tag: $TAG_NAME"
          fi
          
          # Get the change report from our analysis
          CHANGE_REPORT="${{ steps.detect-changes.outputs.change_report }}"
          
          # Create enhanced release body using cat for proper multiline handling
          cat > /tmp/enhanced_body.md << 'EOF'
          ## 🚀 Enhanced Release Notes
          
          ### 📊 Java Code Changes
          - **New Methods:** ${{ steps.detect-changes.outputs.new_methods_count }}
          - **New Classes:** ${{ steps.detect-changes.outputs.new_classes_count }}
          - **Modified Methods:** ${{ steps.detect-changes.outputs.modified_methods_count }}
          - **Modified Classes:** ${{ steps.detect-changes.outputs.modified_classes_count }}
          - **Files Modified:** ${{ steps.detect-changes.outputs.files_modified_count }}
          
          ### 🔍 Detailed Change Analysis
          ```
          $CHANGE_REPORT
          ```
          
          ---
          *Enhanced with Ellithium Java Change Detection*
          EOF
          
          # Update the release with enhanced notes
          gh release edit "$TAG_NAME" --body-file /tmp/enhanced_body.md --repo "$GITHUB_REPOSITORY" || echo "Release not found, will be created when manually published"
      
      - name: Output Enhanced Notes for Manual Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "## 🚀 Enhanced Release Notes Generated!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Java Code Changes" >> $GITHUB_STEP_SUMMARY
          echo "- **New Methods:** ${{ steps.detect-changes.outputs.new_methods_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New Classes:** ${{ steps.detect-changes.outputs.new_classes_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Modified Methods:** ${{ steps.detect-changes.outputs.modified_methods_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Modified Classes:** ${{ steps.detect-changes.outputs.modified_classes_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Files Modified:** ${{ steps.detect-changes.outputs.files_modified_count }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Detailed Change Analysis" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                     # Use the detailed report instead of the console output
           DETAILED_REPORT="${{ steps.detect-changes.outputs.change_report_detailed }}"
           if [[ -n "$DETAILED_REPORT" && "$DETAILED_REPORT" != "Detailed report file not found" ]]; then
             echo "$DETAILED_REPORT" >> $GITHUB_STEP_SUMMARY
           else
             # Fallback to console output if detailed report not available
             CLEAN_REPORT=$(echo "${{ steps.detect-changes.outputs.change_report }}" | sed 's/\[0;34m//g' | sed 's/\[0;32m//g' | sed 's/\[0;31m//g' | sed 's/\[0m//g' | sed 's/\[1;33m//g')
             echo "$CLEAN_REPORT" >> $GITHUB_STEP_SUMMARY
           fi
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Copy this content to your manual release notes!**" >> $GITHUB_STEP_SUMMARY
      
      - name: Show Detailed Changes in Workflow Output
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "🚀 ========================================="
          echo "🚀 ENHANCED JAVA CHANGE DETECTION RESULTS"
          echo "🚀 ========================================="
          echo ""
          echo "📊 SUMMARY STATISTICS:"
          echo "  • New Methods: ${{ steps.detect-changes.outputs.new_methods_count }}"
          echo "  • New Classes: ${{ steps.detect-changes.outputs.new_classes_count }}"
          echo "  • Modified Methods: ${{ steps.detect-changes.outputs.modified_methods_count }}"
          echo "  • Modified Classes: ${{ steps.detect-changes.outputs.modified_classes_count }}"
          echo "  • Files Modified: ${{ steps.detect-changes.outputs.files_modified_count }}"
          echo ""
          echo "🔍 DETAILED CHANGE ANALYSIS:"
          echo "========================================="
          # Use the detailed report instead of the console output
          DETAILED_REPORT="${{ steps.detect-changes.outputs.change_report_detailed }}"
          if [[ -n "$DETAILED_REPORT" && "$DETAILED_REPORT" != "Detailed report file not found" ]]; then
            echo "$DETAILED_REPORT"
          else
            # Fallback to console output if detailed report not available
            CLEAN_REPORT=$(echo "${{ steps.detect-changes.outputs.change_report }}" | sed 's/\[0;34m//g' | sed 's/\[0;32m//g' | sed 's/\[0;31m//g' | sed 's/\[0m//g' | sed 's/\[1;33m//g')
            echo "$CLEAN_REPORT"
          fi
          echo "========================================="
          echo ""
          echo "📋 COPY THE ABOVE DETAILED ANALYSIS FOR YOUR RELEASE NOTES!"
          echo ""
          echo "💡 TIP: This analysis will appear in the workflow logs above."
          echo "💡 TIP: Copy the detailed analysis above for your manual release notes."
          echo ""
          echo "🔍 DEBUG: Detailed report length: $(echo "${{ steps.detect-changes.outputs.change_report_detailed }}" | wc -c) characters"
          echo "🔍 DEBUG: First 500 chars of detailed report:"
          echo "${{ steps.detect-changes.outputs.change_report_detailed }}" | head -c 500
          echo "..."
